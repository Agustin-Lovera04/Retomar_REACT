CONTEXTO

    Para evitar el manejo de informacion por Props en caminos largos.
    llega el CONTEXTO

    
    El contexto nos ayuda para tener la informacion disponible que nosotros querramos en cualqueir momento de nuestro proyecto.
    Evitando asi el Pasamanos de PROPS, que puede ser largo, y engorroso.


    Siendo un "ESTADO GLOBLAL PARA TODA LA APLICACION EN DONDE ALMACENAMOS DATOS O FUNCIONES"


        ·El contexto trabaja con 2 partes principales. PROVEEDOR Y CONSUMIDOR

            ·PROVIDER: componente que proporciona los datos que queremos compartir.
            ·CONSUMIDOR: es quien utiliza esos datos
    



        EJ

            1º Cremos carpeta Context
            2º Crear el contexto en "context.js" // puedo darle un valor por default

            3º
                    const Context = React.createContext(null)


            4ª Importar el contexto en la app
            5º Proveer el contexto en el componente app


                import Context from ...

            
                <Contexto.Provider  value = { dato QUE QUEREMOS QUE ESTE GLOBAL } >
                    <ComponenteCONSUMIDOR />
                </Contexto.Provider>

            
            6° Configurar el CONSUMIDOR ( CON (mas facil) Y SIN HOOK)


                    //SIN HOOK     Debemos utiizar el metodo CONSUMER  y luego una funcion de renderizado

                    
                               
                                importar el contexto

                                <Contexto.Consumer>
                                    <div>
                                        //Contenido que usara los datos globales
                                    </div>
                                </Contexto.Consumer>

